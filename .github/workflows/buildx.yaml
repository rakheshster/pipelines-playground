# This is the name of the workflow
name: Test

# When it runs
on:
  workflow_dispatch:
# I am commenting this stuff out as I don't use it any more. I now pull in the info via a JSON file.
# I wanted to leave this behind however for future reference.
    inputs:
      input1:
        description: 'Input1'
        required: true
        default: '1'
      input2:
        description: 'Input2'
        required: false
        default: '2'

# And what jobs it has
jobs:
  # Just one job here ... imaginatively called "Build" (that's its id at least, it doesn't have a name coz I couldn't think of something)
  Build:
   # this job runs on Ubuntu
    runs-on: ubuntu-latest
    # these are its environment variables
    env: 
      # If I were using the workflow_dispatch inputs above, I can reference them as variables here
      # Variable format for workflow_dipatch https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/
      # IMAGENAME: ${{ github.event.inputs.imagename }}
      # VERSION: ${{ github.event.inputs.version }}
      PLATFORMS: "linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6"

    # the steps of my job
    steps:
        # Checkout the code from GitHib
      - name: Checkout the code
        uses: actions/checkout@v3.1.0

        # Read my JSON file via a simple cat, then output it as the output of this step (which I can then refer to via its id "read_buildinfo") 
      - id: read_buildinfo
        run: |
          content=`cat ./buildinfo.json`
          # the following lines are required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"
      
      # the github context https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
      - name: Print GitHub context
        run: |
          echo "github.action = ${{ github.action }}"
          echo "github.action_path = ${{ github.action_path }}"
          echo "github.actor = ${{ github.actor }}"
          echo "github.base_ref = ${{ github.base_ref }}"
          echo "github.event = ${{ github.event }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.head_ref = ${{ github.head_ref }}"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.repository = ${{ github.repository }}"
          echo "github.repository_owner = ${{ github.repository_owner }}"
          echo "github.event_path = ${{ github.run_id }}"
          echo "github.run_number = ${{ github.run_number }} (changes for each run; does not change for re-runs)"
          echo "github.sha = ${{ github.sha }}"
          echo "github.token = ${{ github.token }}"
          echo "github.workflow = ${{ github.workflow }}"
          echo "github.workspace = ${{ github.workspace }}"

      # FYI: I can refer to this as ${{ steps.ghexample.outputs.workflow-name }} later
      - name: Output variable example (Capture)
        id: ghexample
        run: |
          echo "::set-output name=workflow-name::${{ github.workflow }}"
      
      - name: Output variable example (Print)
        run: |
          echo "From previous step: github.workflow is ${{ steps.ghexample.outputs.workflow-name }}"

      - uses: FranzDiebold/github-env-vars-action@v2

      - name: Print environment variables
        run: |
          echo "GITHUB_ACTOR=$GITHUB_ACTOR"
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_HEAD_REF=$GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF=$GITHUB_BASE_REF"
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
          echo "GITHUB_RUN_ID=$GITHUB_RUN_ID"
          echo "GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER"
          echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
          echo "GITHUB_ACTION=$GITHUB_ACTION"
          
      # Set up QEMU (https://github.com/docker/setup-qemu-action)
      # (this allows buildx to build for other platforms)
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1

      # this is how things used to be prior to this action being officially incorporated into Docker
      # - name: Set up Docker Buildx
      #   uses: crazy-max/ghaction-docker-buildx@v3
      #   with:
      #     buildx-version: latest
      #     qemu-version: latest

      # commenting this as out as I now build and push using an action
      # - name: Docker Buildx (build)
      #   run: |
      #     IMAGENAME="${{ fromJson(steps.read_buildinfo.outputs.packageJson).imagename }}"
      #     VERSION="${{ fromJson(steps.read_buildinfo.outputs.packageJson).version  }}"

      #     docker buildx build --platform $PLATFORMS --output "type=image,push=false" . --tag ${IMAGENAME}:${VERSION} -t ${IMAGENAME}:latest

      # - name: Login to Docker Hub
      #   if: success() && github.event_name != 'pull_request'
      #   uses: crazy-max/ghaction-docker-login@v1 (not used any more as the action name has changed to the below)
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }} 

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v1 
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GHCR_PAT }}

      # - name: Build and push
      #   uses: docker/build-push-action@v2
      #   env:
          # read these variables from the JSON file I inputted in an earlier step and define for use in this step
        #   IMAGENAME: ${{ fromJson(steps.read_buildinfo.outputs.packageJson).imagename }}
        #   VERSION: ${{ fromJson(steps.read_buildinfo.outputs.packageJson).version  }}
        # with:
        #   context: .
        #   file: ./Dockerfile
        #   platforms: ${{ env.PLATFORMS }}
        #   push: true
        #   tags: |
        #     ${{ env.IMAGENAME }}:${{ env.VERSION }}
        #     ${{ env.IMAGENAME }}:latest
        #     ghcr.io/${{ env.IMAGENAME }}:${{ env.VERSION }}
        #     ghcr.io/${{ env.IMAGENAME }}:latest

      # commenting this as out as I now build and push using an action.
      # - name: Docker Buildx (push)
      #   if: success() && github.event_name != 'pull_request'
      #   run: |
      #     IMAGENAME="${{ fromJson(steps.read_buildinfo.outputs.packageJson).imagename }}"
      #     VERSION="${{ fromJson(steps.read_buildinfo.outputs.packageJson).version  }}"

      #     docker buildx build --platform $PLATFORMS --output "type=image,push=true" . --tag ${IMAGENAME}:${VERSION} -t ${IMAGENAME}:latest

      # - name: Inspect image
      #   if: always() && github.event_name != 'pull_request'
      #   run: |
      #     IMAGENAME="${{ fromJson(steps.read_buildinfo.outputs.packageJson).imagename }}"
      #     VERSION="${{ fromJson(steps.read_buildinfo.outputs.packageJson).version  }}"

      #     docker buildx imagetools inspect ${IMAGENAME}:${VERSION}
